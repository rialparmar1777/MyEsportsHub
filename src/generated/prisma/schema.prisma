// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String       @id @default(cuid())
  email                String       @unique
  username             String       @unique
  password             String
  avatar               String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  sessions             Session[]
  tournaments          Tournament[] @relation("TournamentParticipants")
  organizedTournaments Tournament[] @relation("TournamentOrganizer")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  imageUrl    String?
  tournaments Tournament[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Tournament {
  id              String   @id @default(cuid())
  name            String
  description     String?
  gameId          String
  game            Game     @relation(fields: [gameId], references: [id])
  organizerId     String
  organizer       User     @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  participants    User[]   @relation("TournamentParticipants")
  startDate       DateTime
  endDate         DateTime
  prizePool       Float?
  maxParticipants Int?
  status          String   @default("UPCOMING") // UPCOMING, ONGOING, COMPLETED, CANCELLED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
